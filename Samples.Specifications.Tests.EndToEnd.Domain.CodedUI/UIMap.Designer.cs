// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Samples.Specifications.Tests.EndToEnd.Domain.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uILogin_PasswordEdit = this.UILoginViewWindow.UILogin_PasswordEdit;
            WpfButton uILoginButton = this.UILoginViewWindow.UILoginButton;
            WpfEdit uIWarehouseItemPriceTeEdit = this.UIWpfWindow.UIItemCustom.UIWarehouseItemsContaiCustom.UIWarehouseItemPriceTeEdit;
            WinButton uICloseButton = this.UIItemWindow.UICloseButton;
            #endregion

            // The recording for the application under test '\\Mac\Home\Workspace\Samples.Specifications\bin\DebugWithFake\Samples.Specifications.Client.Launcher.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Login_Password' text box
            Mouse.Click(uILogin_PasswordEdit, new Point(44, 14));

            // Type '********' in 'Login_Password' text box
            Keyboard.SendKeys(uILogin_PasswordEdit, this.RecordedMethod1Params.UILogin_PasswordEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(88, 7));

            // The control is not available or not valid.

            // Type '20' in 'WarehouseItemPriceTextBox' text box
            uIWarehouseItemPriceTeEdit.Text = this.RecordedMethod1Params.UIWarehouseItemPriceTeEditText;

            // Last mouse action was not recorded.

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 3));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 5));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWithFakeWindow.UIItemWindow.UISamplesSpecificationListItem.UINameEdit;
            WpfEdit uILogin_PasswordEdit = this.UILoginViewWindow.UILogin_PasswordEdit;
            WpfButton uILoginButton = this.UILoginViewWindow.UILoginButton;
            WpfEdit uIWarehouseItemQuantitEdit = this.UIWpfWindow.UIItemCustom.UIWarehouseItemsContaiCustom.UIWarehouseItemQuantitEdit;
            WpfButton uIApplyButton = this.UIWpfWindow.UIItemCustom.UIWarehouseItemsContaiCustom.UIApplyButton;
            WinButton uICloseButton = this.UIItemWindow.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(240, 9));

            // The recording for the application under test '\\Mac\Home\Workspace\Samples.Specifications\Bin\DebugWithFake\Samples.Specifications.Client.Launcher.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Login_Password' text box
            Mouse.Click(uILogin_PasswordEdit, new Point(31, 15));

            // Type '********' in 'Login_Password' text box
            Keyboard.SendKeys(uILogin_PasswordEdit, this.RecordedMethod2Params.UILogin_PasswordEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(79, 10));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last mouse action was not recorded.

            // Last mouse action was not recorded.

            // Type '7' in 'WarehouseItemQuantityTextBox' text box
            uIWarehouseItemQuantitEdit.Text = this.RecordedMethod2Params.UIWarehouseItemQuantitEditText;

            // Last mouse action was not recorded.

            // Click 'Apply' button
            Mouse.Click(uIApplyButton, new Point(69, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 9));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            #endregion

            // Verify that the 'ControlType' property of 'Wpf' window equals 'Window'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIWpfWindowControlType, uIWpfWindow.ControlType.ToString());
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UILoginViewWindow UILoginViewWindow
        {
            get
            {
                if ((this.mUILoginViewWindow == null))
                {
                    this.mUILoginViewWindow = new UILoginViewWindow();
                }
                return this.mUILoginViewWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDebugWithFakeWindow UIDebugWithFakeWindow
        {
            get
            {
                if ((this.mUIDebugWithFakeWindow == null))
                {
                    this.mUIDebugWithFakeWindow = new UIDebugWithFakeWindow();
                }
                return this.mUIDebugWithFakeWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UILoginViewWindow mUILoginViewWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIDebugWithFakeWindow mUIDebugWithFakeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'Login_Password' text box
        /// </summary>
        public string UILogin_PasswordEditSendKeys = "Y7VEL899T2E+1dy2zEBzWQt7GxQSZssF";
        
        /// <summary>
        /// Type '20' in 'WarehouseItemPriceTextBox' text box
        /// </summary>
        public string UIWarehouseItemPriceTeEditText = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'Login_Password' text box
        /// </summary>
        public string UILogin_PasswordEditSendKeys = "Y7VEL899T2E+1dy2zEBzWQt7GxQSZssF";
        
        /// <summary>
        /// Type '7' in 'WarehouseItemQuantityTextBox' text box
        /// </summary>
        public string UIWarehouseItemQuantitEditText = "7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Wpf' window equals 'Window'
        /// </summary>
        public string UIWpfWindowControlType = "Window";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginViewWindow : WpfWindow
    {
        
        public UILoginViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Login View";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Login View");
            #endregion
        }
        
        #region Properties
        public WpfEdit UILogin_PasswordEdit
        {
            get
            {
                if ((this.mUILogin_PasswordEdit == null))
                {
                    this.mUILogin_PasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUILogin_PasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Login_Password";
                    this.mUILogin_PasswordEdit.WindowTitles.Add("Login View");
                    #endregion
                }
                return this.mUILogin_PasswordEdit;
            }
        }
        
        public WpfButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Login_SignIn";
                    this.mUILoginButton.WindowTitles.Add("Login View");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUILogin_PasswordEdit;
        
        private WpfButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MainView";
            #endregion
        }
        
        #region Properties
        public UIWarehouseItemsContaiCustom UIWarehouseItemsContaiCustom
        {
            get
            {
                if ((this.mUIWarehouseItemsContaiCustom == null))
                {
                    this.mUIWarehouseItemsContaiCustom = new UIWarehouseItemsContaiCustom(this);
                }
                return this.mUIWarehouseItemsContaiCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWarehouseItemsContaiCustom mUIWarehouseItemsContaiCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWarehouseItemsContaiCustom : WpfCustom
    {
        
        public UIWarehouseItemsContaiCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WarehouseItemContainerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WarehouseItemsContainer";
            #endregion
        }
        
        #region Properties
        public WpfEdit UIWarehouseItemPriceTeEdit
        {
            get
            {
                if ((this.mUIWarehouseItemPriceTeEdit == null))
                {
                    this.mUIWarehouseItemPriceTeEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIWarehouseItemPriceTeEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "WarehouseItemPriceTextBox";
                    #endregion
                }
                return this.mUIWarehouseItemPriceTeEdit;
            }
        }
        
        public WpfEdit UIWarehouseItemQuantitEdit
        {
            get
            {
                if ((this.mUIWarehouseItemQuantitEdit == null))
                {
                    this.mUIWarehouseItemQuantitEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIWarehouseItemQuantitEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "WarehouseItemQuantityTextBox";
                    #endregion
                }
                return this.mUIWarehouseItemQuantitEdit;
            }
        }
        
        public WpfButton UIApplyButton
        {
            get
            {
                if ((this.mUIApplyButton == null))
                {
                    this.mUIApplyButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIApplyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "WarehouseItemApplyButton";
                    #endregion
                }
                return this.mUIApplyButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIWarehouseItemPriceTeEdit;
        
        private WpfEdit mUIWarehouseItemQuantitEdit;
        
        private WpfButton mUIApplyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWithFakeWindow : WinWindow
    {
        
        public UIDebugWithFakeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "DebugWithFake";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("DebugWithFake");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("DebugWithFake");
            #endregion
        }
        
        #region Properties
        public UISamplesSpecificationListItem UISamplesSpecificationListItem
        {
            get
            {
                if ((this.mUISamplesSpecificationListItem == null))
                {
                    this.mUISamplesSpecificationListItem = new UISamplesSpecificationListItem(this);
                }
                return this.mUISamplesSpecificationListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISamplesSpecificationListItem mUISamplesSpecificationListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISamplesSpecificationListItem : WinListItem
    {
        
        public UISamplesSpecificationListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Samples.Specifications.Client.Launcher.exe";
            this.WindowTitles.Add("DebugWithFake");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("DebugWithFake");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
}
